package mop;

import java.util.*;
import java.io.*;
import com.oath.halodb.*;
import com.oath.halodb.javamop.*;
checkKeyValueConsistency() {

	HashMap<Long, MapRecord> putResponseMap = new HashMap<Long, MapRecord>();

	HashMap<Long, HashSet<Long>> pendingPutReq = new HashMap<Long, HashSet<Long>>();

	HashMap<Integer, MapRecord> snapshotAtGetReq = new HashMap<Integer, MapRecord>();

	ArrayList<RWThread> threads = new ArrayList<RWThread>();

	HaloDBStorageEngine dbEngine;
	event create_thread(RWThread t){
		threads.add(t);
		System.out.println("Create RWThread.");
	}
	event monitor_init(HaloDBStorageEngine dbEngine){
		this.dbEngine = dbEngine;
		try {
			HaloDBIterator iterator = dbEngine.db.newIterator();
			while (iterator.hasNext()) {
				Record record = iterator.next();
				long key = MopUtils.bytesToLong(record.getKey());
				long value = MopUtils.bytesToLong(record.getValue());
				putResponseMap.put(new Long(key), new MapRecord(key, value));
			}
		} catch (HaloDBException e) {
			e.printStackTrace();
		}
	}
	syncBegin event putReqCall(){
		System.out.println("=== PutReq Sync block starts.");
	}
	syncEnd event putReqExec(byte[] key, byte[] value, int rId){
		Long keyLong = new Long(MopUtils.bytesToLong(key));
		Long valueLong = new Long(MopUtils.bytesToLong(value));
		if (pendingPutReq.containsKey(keyLong)) {
			HashSet<Long> valueSet = pendingPutReq.get(keyLong);
			valueSet.add(valueLong);
		} else {
			HashSet<Long> valueSet = new HashSet<Long>();
			valueSet.add(valueLong);
			pendingPutReq.put(keyLong, valueSet);
		}
		System.out.println(String.format("[putReq#%d] %d,%d", rId, keyLong, valueLong));
		System.out.println("=== PutReq Sync block ends.");
	}
	syncBegin event putResExec(DBPutResult result){
		System.out.println("=== PutRes Sync block starts.");
	}
	syncEnd event putResCall(byte[] key, byte[] value, int rId, DBPutResult result){
		if (result.success) {
			long keyLong = MopUtils.bytesToLong(result.key);
			long valueLong = MopUtils.bytesToLong(result.value);
			putResponseMap.put(new Long(keyLong), new MapRecord(keyLong, valueLong));
			HashSet<Long> valueSet = pendingPutReq.get(new Long(keyLong));
			valueSet.remove(new Long(valueLong));
			System.out.println(String.format("[putRes#%d] %d,%d", rId, keyLong, valueLong));
		} else {
			System.out.println(String.format("[putRes#%d] Failed", rId));
		}
		System.out.println("=== PutRes Sync block ends.");
	}
	syncBegin event getReqCall(){
		System.out.println("=== GetReq Sync block starts.");
	}
	syncEnd event getReqExec(byte[] key, int rId){
		Long keyLong = new Long(MopUtils.bytesToLong(key));
		if (putResponseMap.containsKey(keyLong)) {
			MapRecord record = putResponseMap.get(keyLong);
			snapshotAtGetReq.put(new Integer(rId), record);
			long valueLong = record.value;
			System.out.println(String.format("[getReq#%d] %d,%d", rId, keyLong, valueLong));
		} else {
			System.out.println(String.format("[getReq#%d] %d not in putResponseMap", rId, keyLong));
		}
		System.out.println("=== GetReq Sync block end.");
	}
	syncBegin event getResExec(byte[] result){
		System.out.println("=== GetRes Sync block starts.");
	}
	syncEnd event getResCall(byte[] key, int rId, byte[] result){
		Long keyLong = new Long(MopUtils.bytesToLong(key));
		try {
			if (snapshotAtGetReq.containsKey(new Integer(rId))) {
				if (result == null) {
					System.out.println(String.format("[getRes#%d] ERROR: Get is not Consistent, " + "failed to find an existing key %d!", rId, keyLong));
					return;
				}
				Long resultValue = new Long(MopUtils.bytesToLong(result));
				Long snapshotValue = new Long(snapshotAtGetReq.get(new Integer(rId)).value);
				if (!(snapshotValue <= resultValue)) {
					System.out.println(String.format("[getRes#%d] ERROR: For key %d, " + "expected value of sequencer is >= %d but got %d. Get is not Consistent!", rId, keyLong, snapshotValue, resultValue));
					return;
				}
			} else {
				if (result != null) {
					boolean isInPutResponseMap = false;
					boolean isInPendingPutReq = false;
					Long resultValue = new Long(MopUtils.bytesToLong(result));
					if (putResponseMap.containsKey(keyLong)) {
						if (resultValue.equals(putResponseMap.get(keyLong).value)) {
							isInPutResponseMap = true;
						}
					}
					if (pendingPutReq.containsKey(keyLong)) {
						if (pendingPutReq.get(keyLong).contains(resultValue)) {
							isInPendingPutReq = true;
						}
					}
					if (!(isInPutResponseMap || isInPendingPutReq)) {
						System.out.println(String.format("[getRes#%d] ERROR: Get succeeded for key %d, " + "expected the get to fail but got a success. " + "Get is not Consistent, got a key that does not exist!", rId, keyLong));
						return;
					}
				}
			}
		} catch (Exception e) {
		} finally {
			if (result == null) {
				System.out.println(String.format("[getRes#%d] No value for key %d", rId, keyLong));
			} else {
				Long resultValue = new Long(MopUtils.bytesToLong(result));
				System.out.println(String.format("[getRes#%d] %d,%d", rId, keyLong, resultValue));
			}
			System.out.println("=== GetRes Sync block ends.");
		}
	}
	event snapshot_Before(){
		for (int i = 0; i < threads.size(); i++) {
			RWThread t = threads.get(i);
			t.pauseExec();
		}
		try {
			dbEngine.db.pauseCompaction();
		} catch (Exception e) {
		}
	}
	event snapshot_After(){
		try {
			HaloDBIterator iterator = dbEngine.db.newIterator();
			while (iterator.hasNext()) {
				Record record = iterator.next();
				long key = MopUtils.bytesToLong(record.getKey());
				long value = MopUtils.bytesToLong(record.getValue());
				System.out.println(String.format("Disk: %d, %d", key, value));
			}
			for (MapRecord r : putResponseMap.values()) {
				System.out.println(String.format("Memory: %d, %d", r.key, r.value));
			}
			for (int i = 0; i < threads.size(); i++) {
				RWThread t = threads.get(i);
				t.resumeExec();
			}
			dbEngine.db.resumeCompaction();
		} catch (Exception e) {
		}
	}
	event testEnd(){
		System.out.println("End of Test");
	}
}
